class Test {
    var @value = None
}

define check_assigning {
    var v = Some(10)
    v = None

    var t = Test()
    t.value = Some(Dynamic(1))
}

define check_variant_returning {
    define a: Option[Integer] { return Some(1) }
    define b: Option[Integer] { return None }
}

define check_defaulting {
    var a: List[Option[Integer]] = [Some(10), None, None]
    var b: Hash[Integer, Option[Integer]] = [1=>None, 2=>Some(10), 3=>Some(11)]
}

define check_pass_by_value {
    define f(a: Option[Integer])
    {
        var v = [a]
        a = Some(11)
        match v[0]: {
            case Some(s):
                stderr.print("Failed.")
            case None:
        }
    }

    var v: Option[Integer] = Some(10)
}

define check_generic_calls {
    define f[A](first: Option[A], second: Option[A]) {  }

    f(None, None)
    f(Some(10), Some(10))
    f(Some("10"), None)
    f(None, Some(10))
}

define check_varargs {
    define f[A](values: Option[A]...) {  }

    f(None, None, None)
    f(None, Some(10), None)
    f(Some(10), Some(10))
}

define check_nesting {
    var t: Option[Option[Integer]] = Some(Some(10))
}

check_assigning()
check_variant_returning()
check_defaulting()
check_pass_by_value()
check_generic_calls()
check_varargs()
check_nesting()
