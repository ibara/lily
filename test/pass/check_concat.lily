var total = 0, failed = 0

define ok(b: Boolean, s: String)
{
    total += 1

    if b == false: {
        stderr.write("Test {0} ({1}) failed.\n".format(total, s))
        failed += 1
    }
}

# Since the interpolation test verifies output, this doesn't need to.
# This test is more about checking the parsing.

define fn[A](a: A): A { return a }

ok("" ++ "" == "",                     "Empty concat yields empty result.")
ok([1, 2] ++ <[1]> == "[1, 2]<[1]>",   "Concat of different types.")
ok("a" ++ "b" == "ab",                 "Concat with comparison (precedence).")
ok("a" ++ "a" |> fn == "aa",           "Concat with pipe (precedence).")

if failed == 0:
    print("{0} of {0} tests passed.".format(total))
else:
    stderr.write("{0} tests have failed.\n".format(failed))
