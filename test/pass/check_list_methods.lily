var total = 0, failed = 0

define ok(b: Boolean, s: String)
{
    total += 1

    if b == false: {
        stderr.write("Test {0} ({1}) failed.\n".format(total, s))
        failed += 1
    }
}

class Point(x: Integer, y: Integer)
{
    var @x = x
    var @y = y
}

ok((||
    var v = [1, 2, 3]
    v.clear()
    v == [])(),                        "List.clear on a list of Integer.")
ok((||
    var v = ["1", "2", "3"]
    v.clear()

    v == [])(),                        "List.clear on a list of String.")
ok((||
    var v = [Dynamic(1), Dynamic(2), Dynamic(3)]
    v.clear()
    v == [])(),                        "List.clear on a list of Dynamic.")


ok((||
    var v = []
    v.count(|a| true) == 0)(),         "List.count on an empty list.")

ok((||
    var v = [1, 2, 3, 4, 5]
    v.count(|a| a % 2 == 0) == 2)(),   "List.count using modulo.")

ok((||
    var v = [1, 2, 3]
    v.count(|a| true) == 3)(),         "List.count with 'true' predicate'.")

ok((||
    var v = [Some(1), None, Some(2)]
    v.count(|a| a.is_none()) == 1)(),  "List.count inferring a method.")

ok((||
    var v = [1, 2, 3]
    v.delete_at(-1)
    v.delete_at(0)
    v == [2])(),                       "List.delete_at with positive+negative indexes.")

ok((||
    var v = [1]
    var result = false
    try:
        v.delete_at(-2)
    except IndexError:
        result = true
    result)(),                          "List.delete_at throws IndexError with bad negative.")

ok((||
    var v = [1]
    var result = false
    try:
        v.delete_at(2)
    except IndexError:
        result = true
    result)(),                          "List.delete_at throws IndexError with bad positive.")    

ok((||
    var v = [0, 1, 2]
    var results = [0, 0, 0]
    var k = 0

    v.each(|e|
        k += 1
        results[e] = k
        )
    results == [1, 2, 3]
    )(),                                "List.each visits all elements and in order.")

ok((||
    var result = true
    try:
        [].each(|e| 1 / 0 )
    except DivisionByZeroError:
        result = false
        
    result
    )(),                                "List.each does nothing for an empty list.")

ok((||
    var v = [3, 2, 1]
    var results = [0, 0, 0]
    var k = 0
    var i_total = 0

    v.each_index(|i|
        k += 1
        results[i] = k
        )
    results == [1, 2, 3]
    )(),                                "List.each_index visits all elements and in order.")

ok((||
    [1, 2, 3].fold(0, (|a, b| a + b)) == 6
    )(),                                "List.fold with type Integer.")

ok((||
    var v: List[Integer] = []
    var result = true
    try:
        v.fold(0,
            (|a, b|
             true
             1 / 0))
    except DivisionByZeroError:
        result = false

    result
    )(),                                "List.fold ignores empty lists.")

ok((||
    var v = [1]
    v.insert(0, 0)
    v == [0, 1]
    )(),                                "List.insert at position 0.")

ok((||
    var v = [1]
    v.insert(-1, 2)
    v == [2, 1]
    )(),                                "List.insert at a negative position.")

ok((||
    var v = [1]
    var result = false
    try:
        v.insert(5, 0)
    except IndexError:
        result = true
    result
    )(),                                "List.insert with position exceeding positive max.")

ok((||
    var v = [1]
    var result = false
    try:
        v.insert(-5, 0)
    except IndexError:
        result = true
    result
    )(),                                "List.insert with position under negative min.")

ok([].join() == "",                     "List.join with empty list and default separator.")
ok([].join(",") == "",                  "List.join with empty list.")
ok([1].join() == "1",                   "List.join with 1-element list and default separator")
ok([1].join(" ") == "1",                "List.join with 1-element list.")
ok([1, 2, 3].join() == "123",           "List.join with 3-element list and default separator.")
ok([1, 2, 3].join(", ") == "1, 2, 3",   "List.join with 3-element list.")

ok((||
    var v = [1, 2, 3]
    var w = v.map(|a| a)
    w == [1, 2, 3]
    )(),                                "List.map using static function.")

ok((||
    var v = [1, 2, 3]
    var w = v.map(Integer.to_s)
    w == ["1", "2", "3"]
    )(),                                "List.map using static function.")

ok((||
    var v = [1]
    v.pop()
    v == []
    )(),                                "List.pop with list of size 1.")

ok((||
    var result = false
    try:
        [].pop()
    except IndexError:
        result = true

    result
    )(),                                "List.pop raises when passed an empty list.")

ok((||
    [1, 2, 3, 4, 5].reject(|i| (i % 2) == 1) == [2, 4]
    )(),                                "List.reject removing odd numbers.")

ok((||
    List.repeat(3, 5) == [5, 5, 5]
    )(),                                "List.repeat for type Integer.")

ok((||
    List.repeat(3, Point(1, 2))
    true
    )(),                                "List.repeat for a user-defined class.")

ok((||
    var result = false
    try:
        List.repeat(-1, 0)
    except ValueError:
        result = true
    result
    )(),                                "List.repeat raises ValueError with negative repeat.")

ok((||
    [1, 2, 3].select(|a| true) == [1, 2, 3]
    )(),                                "List.select keeping all values.")

ok((||
    var fn = (|x: Integer|
              1 / 0
              true)
    var result = false
    try:
        [1].select(fn)
    except DivisionByZeroError:
        result = true
    result
    )(),                                "List.select being interrupted.")

ok((||
    [1, 2, 3].select(|a| false) == []
    )(),                                "List.select rejecting all values.")

ok((||
    [1, 2, 3].select(|i| (i % 2) == 1) == [1, 3]
    )(),                                "List.select keeping evens.")

ok((||
    var v = [1, 2, 3]
    v.shift()
    v.shift()
    v == [3]
    )(),                                "List.shift removes values from the left.")

ok((||
    var v = ["a", "b", "c"]
    v.shift() == "a"
    )(),                                "List.shift returns the first value.")

ok((||
    var v = []
    var result = false
    try:
        v.shift()
    except IndexError:
        result = true

    result
    )(),                                "List.shift raises IndexError for an empty list.")

ok([1, 2, 3].slice() == [1, 2, 3],      "List.slice defaults copy the list.")
ok([1, 2, 3].slice(0, -1) == [1, 2],    "List.slice basic 0...-1 works.")
ok([1, 2, 3].slice(1, 2) == [2],        "List.slice basic 1...2 works (b).")
ok([1, 2, 3].slice(2, 1) == [],         "List.slice gives empty string for reversed indexes.")
ok([1, 2, 3].slice(1, 5) == [],         "List.slice gives empty string for too big indexes.")

ok((||
    var v = [1]
    v.unshift(0)
    v.unshift(-1)
    v == [-1, 0, 1]
    )(),                                "List.unshift pushing simple numbers.")

if failed == 0:
    print("{0} of {0} tests passed.".format(total))
else:
    stderr.write("{0} tests have failed.\n".format(failed))
