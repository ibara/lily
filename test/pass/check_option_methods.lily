var total = 0, failed = 0

define ok(b: Boolean, s: String)
{
    total += 1

    if b == false: {
        stderr.write("Test {0} ({1}) failed.\n".format(total, s))
        failed += 1
    }
}

define opt_square(x: Integer): Option[Integer] { return Some(x * x) }
define opt_empty(x: Integer): Option[Integer] { return None }

# Hack: Lily's unification isn't smart enough to figure out that using
# List.size directly will satisfy the Option.map case. For now, do this.
define isize(l: List[Integer]): Integer { return l.size() }



ok(None.is_none(),                                  "Option.is_none on None.")
ok(Some(1).is_none() == false,                      "Option.is_none on Some.")

ok(None.is_some() == false,                         "Option.is_some on None.")
ok(Some(1).is_some(),                               "Option.is_some on Some.")

ok(None.and(None).is_none(),                        "Option.and with None and None.")
ok(None.and(Some(Dynamic(1))).is_none(),            "Option.and with None and Some.")
ok(Some(1).and(Some(2)).is_some(),                  "Option.and with Some and Some.")
ok(Some(1).and(None).is_none(),                     "Option.and with Some and None.")

ok(Some(4).and_then(opt_square).unwrap() == 16,     "Option.and_then with squared Some.")

ok((||
    var v: Option[Integer] = None
    v.and_then(opt_square).is_none()
    )(),     "Option.and_then with None.")

ok(Some([1, 2, 3]).map(isize).unwrap() == 3,        "Option.map using a Some with a list inside.")

ok((||
    var v: Option[List[Integer]] = None
    v.map(isize).is_none()
    )(),                                            "Option.map with None.")

ok((||
    var v: Option[Integer] = None
    v.or(v).is_none()
    )(),                                            "Option.or with None and None.")

ok((||
    var v: Option[Integer] = None
    v.or(Some(2)).unwrap() == 2
    )(),                                            "Option.or with None and Some.")

ok(Some(1).or(None).unwrap() == 1,                  "Option.or with Some and None.")
ok(Some(1).or(Some(2)).unwrap() == 1,               "Option.or with Some and Some.")

ok((||
    var v: Option[Integer] = None
    v.or_else(|| Some(1) ).unwrap() == 1
    )(),                                            "Option.or_else with None.")

ok(Some(1).or_else(|| Some(1 / 0) ).unwrap() == 1,  "Option.or_else with Some.")

ok(Some(1).unwrap() == 1,                           "Option.unwrap on Some.")

ok((||
    var result = false
    try:
        None.unwrap()
    except ValueError:
        result = true

    result
    )(),                                            "Option.unwrap raises ValueError for None.")

ok((||
    var v: Option[Integer] = None
    v.unwrap_or(5) == 5
    )(),                                            "Option.unwrap_or for None.")

ok(Some(1).unwrap_or(5) == 1,                       "Option.unwrap_or for Some.")

ok((||
    var v: Option[Integer] = None
    v.unwrap_or_else(|| 5) == 5
    )(),                                            "Option.unwrap_or_else for None.")

ok(Some(1).unwrap_or_else(|| 1 / 0) == 1,           "Option.unwrap_or_else for Some.")

if failed == 0:
    print("{0} of {0} tests passed.".format(total))
else:
    stderr.write("{0} tests have failed.\n".format(failed))
