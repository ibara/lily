var total = 0, failed = 0

define ok(b: Boolean, s: String)
{
    total += 1

    if b == false: {
        stderr.write("Test {0} ({1}) failed.\n".format(total, s))
        failed += 1
    }
}

# Make sure this check is up before anything else, since it's line-sensitive.

ok(__line__ == 15, "Check __line__")

# This file contains tests that check various core parts of the interpreter.
# Most of these tests are unlikely to break unless the interpreter has some
# critical error.

define f: String
{
    return __function__
}

# Let's start off simple: Are the magic constants ok?

ok(f() == "f",                              "Check __function__")
ok((|| __file__)() == __file__,             "Check __file__ being correct inside of a lambda.")
ok(__file__.ends_with("check_basics.lily"), "Check __file__ being correct")

# Make sure falsey things are seen as falsey.

ok((||
    var is_ok = true
    if false:
        is_ok = false

    is_ok )(),         "Boolean false is falsey.")
ok((||
    var is_ok = true
    if 0:
        is_ok = false

    is_ok )(),         "Integer 0 is falsey.")
ok((||
    var is_ok = true
    if 0.0:
        is_ok = false

    is_ok )(),         "Integer 0 is falsey.")
ok((||
    var is_ok = true
    if "":
        is_ok = false

    is_ok )(),         "Empty String is falsey.")
ok((||
    var is_ok = true
    if 0:
        is_ok = false

    is_ok )(),         "Empty List is falsey.")

# Is digit collection ok?

ok(+0b111111111111111111111111111111111111111111111111111111111111111 == +9223372036854775807,
   "Binary max is decimal max.")

ok(+0c777777777777777777777 == +9223372036854775807,
   "Octal max is decimal max.")

ok(+0x7fffffffffffffff == +9223372036854775807,
   "Hex max is decimal max.")

ok(-0b1000000000000000000000000000000000000000000000000000000000000000 == -9223372036854775808,
   "Binary min is decimal min.")

ok(-0c1000000000000000000000 == -9223372036854775808,
   "Octal min is decimal min.")

ok(-0x8000000000000000 == -9223372036854775808,
   "Hex min is decimal min.")

ok(0b0110 == 6,                 "Binary digit scanning.")
ok(0c1234567 == 342391,         "Octal digit scanning.")
ok(0x1234567890 == 78187493520, "Hex range scanning.")
ok(0xabcdef == 11259375,        "Hex lowercase.")
ok(0xABCDEF == 11259375,        "Hex uppercase.")

ok(1e-1 == 0.1,                 "Negative exponent.")
ok(1e+1 == 10.0,                "Positive exponent.")
ok(1e1 == 10.0,                 "Inferred exponent.")
ok(.1 == 0.1,                   ".1 == 0.1.")

# Make sure string escapes are working properly.

ok("" == """""",                     "Empty single-line string equals empty multi-line string.")
ok("abc" == """abc""",               "abc == abc.")
ok("\aabc" == """\aabc""",           "String escape char at start.")
ok("abc\adef" == """abc\adef""",     "String escape in middle.")
ok("abcdef\a" == """abcdef\a""",     "String escape at end.")
ok("\aabc\adef" == """\aabc\adef""", "String escape at start and mid.")
ok("\aabcdef\a" == """\aabcdef\a""", "String escape at start and end.")
ok("abc\adef\a" == """abc\adef\a""", "String escape at mid and end.")
ok((|| "\n" )() == "\n",             "String escape works within a lambda.")
ok((|| "\"" )() == "\"",             "String escape within a lambda (2).")
ok((|| B"\000" )() == B"\000",       "Bytestring collection works within a lambda.")
ok("""a
b
c""" == "a\nb\nc",                   "Multi-line string collect.")

# utf-8

ok((||
    var h3llö = "hello"
    true)(),                         "utf-8 identifier.")
ok("á" == "á",                       "utf-8 in strings.")

# Now lists

ok([1, 2, 3][0] == 1,     "List subscript for first element.")
ok([1, 2, 3][2] == 3,     "List subscript for last element.")
ok([1, 2, 3][-1] == 3,    "List subscript by -1.")

# Make sure unary is ok

ok(!1 == 0,               "!1 equals 0.")
ok(!0 == 1,               "!0 equals 1.")
ok(!true == false,        "!true equals false.")
ok(!false == true,        "!false equals true.")
ok(![1][0] == 0,          "! on list subscript.")

# Hash checks

ok((||
    var v: Hash[String, String] = []
    v["abc"] = "def"
    v["def"] = "abc"
    true
    )(),                  "Hash key assign on creation.")
ok((||
    var v = ["a" => "a", "b" => "b"]
    var result = ((v["a"] == "a") && v["b"] == "b")
    result != false
    )(),                  "Check hash literal values.")
ok((||
    var v = [1 => 1, 1 => 2, 2 => 2, 2 => 4]
    var result = ((v[1] == 2) && (v[2] == 4))
    result != false
    )(),                  "Hash literals take the right-most value.")
ok((||
    var h: Hash[Integer, Integer] = []
    var reverse_h: Hash[Integer, Integer] = []
    var i = 0
    var expect = 0
    var loop_total = 15

    for i in 0...loop_total: {
        h[i] = i
        reverse_h[loop_total - i] = loop_total - i
        expect += i
    }

    var local_total = 0
    h.each_pair(|k, v| local_total += v)

    local_total == expect &&
    h == reverse_h
    )(),                  "Hashes are looking at all of their entries.")

# Tuple literals

ok((||
    var t = <[1, "1", [1]]>
    true )(),             "Basic tuple literal.")
ok((||
    var t = <["1", 1]>
    var s = t[1].to_s()
    s == "1"
    )(),                  "Inference works with tuple subscripts.")
ok((||
    var t = <[0, [1]]>
    t[1] = [2]
    t[0] = t[1][0] + 2
    t == <[4, [2]]>
    )(),                  "Multiple tuple subscripts.")

# What can expressions start with?

ok((|| 1 )() == 1,                   "Expressions can start with an integer")
ok((|| 1.0 )() == 1.0,               "Expressions can start with a double.")
ok((|| [1] )() == [1],               "Expressions can start with a list.")
ok((|| <[1]> )() == <[1]>,           "Expressions can start with a tuple.")
ok((|| [1 => 1] )() == [1 => 1],     "Expressions can start with a hash.")
ok((|| true )() == true,             "Expressions can start with true.")
ok((|| false )() == false,           "Expressions can start with false.")
ok((|| "" )() == "",                 "Expressions can start with a string.")
ok((|| (1) )() == (1),               "Expressions can start with parentheses.")
ok((|| +1 )() == +1,                 "Expressions can start with a positive number.")
ok((|| -1 )() == -1,                 "Expressions can start with a negative number.")
ok((|| __line__ )() == __line__,     "Expressions can start with __line__.")

# Make sure assignment chains are working.

class Triad(a: Integer, b: Integer, c: Integer)
{
    var @a = a
    var @b = b
    var @c = c
    @a = @b = @c
}

ok((||
    var a = 1, b = 2, c = 3
    a = b = c
    var result = ((a == 3 && b == 3))
    result == true)(),                       "Basic assignment chain.")
ok((||
    var a = 10, b = 20, c = 30
    a *= b *= c
    var result = (a == 6000 && b == 600 && c == 30)
    result == true)(),                       "Compound op assignment chain.")
ok((||
    var v = Triad(1, 2, 3)
    var result = (v.a == 3 && v.b == 3 && v.c == 3)
    result == true)(),                       "Assign chain using @prop.")
ok((||
    var v = Triad(1, 2, 3)
    v.a = 1
    v.b = 2
    v.c = 3
    v.a = v.b = v.c
    var result = (v.a == 3 && v.b == 3 && v.c == 3)
    result == true)(),                       "Assign chain using .prop.")

# Vararg calls.

define padded_vararg_total(unused: String, args: Integer...): Integer
{
    var va_total = 0
    args.each(|a| va_total += a )
    return va_total
}

define just_vararg_total(args: Integer...): Integer
{
    var va_total = 0
    args.each(|a| va_total += a )
    return va_total
}

ok((||
    padded_vararg_total("", 1, 2, 3) == 6)(), "Padded va call with 3 values.")
ok((||
    padded_vararg_total("") == 0)(),          "Padded va call with no values.")
ok((||
    just_vararg_total(1, 2, 3) == 6)(),       "Just va call with 3 values.")
ok((||
    just_vararg_total() == 0)(),              "Just va call with no values.")

# Check typecasting

ok((||
    var d = Dynamic(10)
    var i = d.@(Integer).unwrap()
    i == 10)(),                               "Typecast from Dynamic to Integer.")

ok((||
    var d = Dynamic(10)
    var s = d.@(String)
    s.is_none())(),                           "Typecast to wrong type returns None.")

ok((||
    var d = Dynamic(Dynamic("1"))
    var d2 = d.@(Dynamic).unwrap()
    var d3 = d2.@(String).unwrap()
    d3 == "1")(),                             "Typecast from nested Dynamic.")

# Call piping

class Test {
    define add(v: Integer) {}
    10 |> add
}

define id[A](a: A): A { return a }
define times_two(a: Integer): Integer { return a * 2 }

ok((10 |> times_two) == 20,                   "Single call pipe with no solving.")
ok((10 |> times_two |> times_two) == 40,      "Pipe chain, no solving.")
ok((10 |> id) == 10,                          "Pipe to generic id.")
ok((||
    var order: List[Integer] = []
    var fn: Function(Integer => Integer) =
        (|a|
         order.push(a)
         a)
    fn(3) |> [fn(1), fn(2)].push
    order == [1, 2, 3] )(),                   "Piping preserves order of operations.")
ok((10 |> Some).unwrap() == 10,               "Piping to a variant.")
# Miscellaneous tests...

ok((||
    var v = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
    for i in 0...2:
        for j in 0...2:
            v[i][j] = 1

    var result = (v == [[1, 1, 1], [1, 1, 1], [1, 1, 1]])
    result)(),                            "Nested for loop subscript assignment.")

ok((||
    var v = 1 +1
    v == 2)(),                            "1 +1 is seen as 1 + 1 when binop needed.")

# Is assert okay?

ok((||
    var v = false
    try:
        assert(false)
    except AssertionError:
        v = true

    v)(), "Check assert(false) raises AssertionError.")

ok((||
    var v = false
    try:
        assert(false)
    except AssertionError as e:
        v = (e.message == "")

    v)(), "Check assert(false) doesn't have an error message.")

ok((||
    var v = false
    try:
        assert(false, "Message")
    except AssertionError as e:
        v = (e.message == "Message")

    v)(), "Check assert(false, message) has the message.")

ok((||
    assert(true)
    true
    )(), "Check assert(true) does nothing.")

if failed == 0:
    print("{0} of {0} tests passed.".format(total))
else:
    stderr.write("{0} tests have failed.\n".format(failed))
