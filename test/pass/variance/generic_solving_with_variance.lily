class One {}
class Two < One {}
class Three < Two {}

define f[A](input: A, g: Function(A => A)) {}

# This works because when trying to solve as 'FunctionA => A)', the first A
# is looked at contravariantly, while the second is covariant.
# Doing the reverse (taking either Three or outputting One) would be incorrect.

define g(a: One) : Three { return Three() }

f(Two(), g)
